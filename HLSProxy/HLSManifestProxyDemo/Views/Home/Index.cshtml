 <!--*****START OF Azure Media Player Scripts*****-->
<!--Note: DO NOT USE the "latest" folder in production. Replace "latest" with a version number like "1.0.0"-->
<!--EX:<script src="//amp.azure.net/libs/amp/1.0.0/azuremediaplayer.min.js"></script>-->
<!--Azure Media Player versions can be queried from //aka.ms/ampchangelog-->
<link href="//amp.azure.net/libs/amp/latest/skins/amp-default/azuremediaplayer.min.css" rel="stylesheet">
<script src="//amp.azure.net/libs/amp/latest/azuremediaplayer.min.js"></script>
<!--*****END OF Azure Media Player Scripts*****-->

<div class="jumbotron">
    <h1>HLS Manifest Proxy Demo v2</h1>
    <p class="lead">Demo to showcase the use of the ManifestProxyController, as outlined in the <a href="http://azure.microsoft.com/blog/2015/03/06/how-to-make-token-authorized-aes-encrypted-hls-stream-working-in-safari/">blogpost</a>.  Revised by JameelaEsa to include an Authentication Service to automatically generate tokens.</p>
</div>
<div class="row">
    @{
        string playbackurl = ViewData["playbackurl"] as string;
        if (IsPost)
        {
            playbackurl = Request["playbackurl"];

            string webtoken = Request["webtoken"];


            webtoken = ViewData["webtoken"] as string;

            string urlencoded_webtoken = HttpUtility.UrlEncode(webtoken);
            string proxyurl = "Home/Manifest?playbackUrl=" + @playbackurl + "(format=m3u8-aapl)";
            string urlencoded_proxyurl = "http://jameelaesahlsproxy.azurewebsites.net/" + @proxyurl + "&webtoken=" + @urlencoded_webtoken;

            <form method="post" action="">
                Manifest URL:<br />
                <input type="text" name="playbackurl" value="@playbackurl" size="150" /><br />
                JWT Token:<br />
                <input type="text" name="webtoken" value="@webtoken" size="150" /><br /><br />
                <input type="submit" value="Submit" class="submit" />
            </form>
            <p>
                <br />
                You entered: <br />
                Manifest URL: @playbackurl <br /> <br />
                JWT Token: @webtoken <br /> <br />
                HLS Proxy URL: @urlencoded_proxyurl  <br /> <br />

                <a href=" @urlencoded_proxyurl">HLS Proxy URL for Native Safari </a> <br /> <br />

                <a href="http://ampdemo.azureedge.net/azuremediaplayer.html?url=@urlencoded_proxyurl&format=hls&aes=true">HLS Proxy URL played by Azure Media player at http://aka.ms/azuremediaplayer </a> <br /> <br />
            </p>

            //AMP Player code
            <video id="azuremediaplayer" class="azuremediaplayer amp-default-skin" autoplay controls width="640" height="400"></video>
                <!--To do it as HTML use the AMP player code below-->
                @*<source src="@playbackurl"
                        type="application/vnd.ms-sstr+xml"
                        data-setup='{"protectioninfo": [{"type": "aes", "authenticationtoken": "bearer=@webtoken"}],"streamingformats":["smooth","dash"]}' />
                <source src="/@proxyurl&webtoken=@urlencoded_webtoken"
                        type="application/vnd.apple.mpegurl"
                        data-setup='{"type": "aes", "disableurlrewriter": true}' /> do not need the bearer token in this instance since that is included on the streaming src url*@
            <script>
                    var myOptions = {
                        autoplay: true,
                        controls: true,
                        width: "640",
                        height: "400"
                    };
                    var myPlayer = amp("azuremediaplayer", myOptions);
		            //note: you will need to implement the proxy as outlined in this blog (https://azure.microsoft.com/en-us/blog/how-to-make-token-authorized-aes-encrypted-hls-stream-working-in-safari/)
		            //in this example the HLS link is faked to show how this would work. In a real application, the HLS link should be pointing to the proxy with a token as the query parameter.
                    //Here we're defining 2 urls, the 1st source link is for smooth/dash and the 2nd source link is for hls 
                    myPlayer.src([{
                        src: "@playbackurl",
                        type: "application/vnd.ms-sstr+xml",
                        streamingFormats: ["SMOOTH", "DASH"],
                        protectionInfo: [{
                                type: "AES",
                                authenticationToken: "Bearer=@webtoken"
                            }
                        ]
                    },
                        {
                        src: "/@proxyurl&webtoken=@urlencoded_webtoken",
                        type: "application/vnd.apple.mpegurl",
                        disableUrlRewriter: true,
                        protectionInfo: [{
                            type: "AES"
                            //no need for the bearer token since this will be added to the streaming url with the HLS Proxy
                            }
                        ]
                         }
                   ]);


            </script>
        }
        else
        {
            <form method="post" action="">
                Manifest URL:<br />
                <input type="text" name="playbackurl" value="https://amstest-usea.streaming.media.azure.net/e0aef0e0-e5ac-4dbc-96c0-386f4f5e186d/10minMorningYoga.ism/manifest" size="150" /><br />
                JWT Token:<br />
                <input type="text" name="webtoken" value="" size="150" /><br /><br />
                <input type="submit" value="Submit" class="submit" />
            </form>
        }
    }
</div>
